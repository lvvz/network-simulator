(uiop:define-package :network-simulator/generators/hierarchy
    (:nicknames :ns-gen-hierarchy)
  (:use :common-lisp)
  (:use :network-simulator/generators/generics)
  (:export #:hierarchical-network
	   #:linear-network))

(in-package :ns-gen-hierarchy)


(defclass hierarchical-network ()
  ((nodes :initform (make-node-map)
	  :accessor hn-nodes)))

(defun create-channels-for-node (src-id restricted channel-builder next-nodes)
  (let ((src-node (get-node src-id)))
    (unless (gethash src-id restricted)
      (setf (gethash src-id restricted) t)
      (maphash (lambda (id node)
		 (unless (gethash id restricted)
		   (when (< (hash-table-count (node-channels src-node))
			    (node-channels-count src-node))
		     (when (= 0 (hash-table-count (node-channels node)))
		       (let ((channel (build-channel channel-builder)))
			 (funcall next-nodes id)
			 (setf (gethash id (node-channels src-node))
			       (list :out channel))
			 (setf (gethash src-id (node-channels node))
			       (list :in channel)))))))
	       (network-nodes *network*)))))

(defun create-channel-hierarchy (restricted channel-builder nodes)
  (let ((next-nodes (list)))
    (labels ((%push (id) (push id next-nodes)))
      (mapc (rcurry #'create-channels-for-node restricted channel-builder #'%push)
	    nodes))
    (when next-nodes
      (create-channel-hierarchy restricted channel-builder next-nodes))))

(defmethod generate-connections ((policy hierarchical-network) channel-builder)
  (create-channel-hierarchy (hn-nodes policy)
			    channel-builder
			    (list (network-satellite-node-id *network*))))

(defclass linear-network ()
  ((nodes :initform (make-node-map)
	  :accessor hn-nodes)))

(defun create-connections-for-node (src-id restricted channel-builder)
  (let ((src-node (get-node src-id)))
    (unless (gethash src-id restricted)
      (setf (gethash src-id restricted) t)
      ;; (break "~A" restricted)
      (maphash (lambda (id node)
		 (unless (gethash id restricted)
		   (when (< (hash-table-count (node-channels src-node))
			    (node-channels-count src-node))
		     (let ((channel (build-channel channel-builder)))
		       (setf (gethash id (node-channels src-node))
			     (list :out channel))
		       (setf (gethash src-id (node-channels node))
			     (list :in channel))))))
	       (network-nodes *network*))
      (maphash (lambda (id channel)
		 (declare (ignore channel))
		 (setf (gethash id restricted) t))
	       (node-channels src-node))
      (maphash (lambda (id channel)
		 (when (eq :out (first channel))
		   (setf (gethash id restricted) nil))
		 (create-connections-for-node id restricted channel-builder)
		 (setf (gethash id restricted) t))
	       (node-channels src-node)))))

(defmethod generate-connections ((policy linear-network) channel-builder)
  (create-connections-for-node (network-satellite-node-id *network*)
			       (hn-nodes policy)
			       channel-builder))
